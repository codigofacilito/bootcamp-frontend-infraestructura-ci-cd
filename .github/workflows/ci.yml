name: Build and Test

on:
  push:
    branches: [ main ] # N cantidad de ramas, no hay problema, incluso si no existen
  pull_request:
    branches: [ main ] # Aca tambien se pueden agregar ramas, pero no es necesario
jobs: # Se pueden agregar varios jobs, pero en este caso solo hay 2
  test:
    runs-on: ubuntu-latest # Se puede cambiar por windows o mac, pero en este caso es ubuntu
    # Se puede ejecutar en diferentes sistemas operativos
    
    steps:
      - uses: actions/checkout@v4 # Descarga el repositorio en la version del commit que se esta ejecutando

      # Configura el entorno de Node.js en su versión 20
      - name: Setup Node.js # Este solo es un campo descriptivo, no afecta el funcionamiento
        uses: actions/setup-node@v4 # Configura el entorno de Node.js en la maquina virtual
        with:
          node-version: '20' # Version de Node.js a utilizar
          cache: 'npm' # Cachea las dependencias de npm para acelerar el proceso, esto lo hace en el package-lock.json

      - name: Install dependencies # Instala las dependencias del proyecto, el name es solo descriptivo
        # npm ci es un comando de npm diseñado específicamente para entornos de integración continua (CI). Su propósito es instalar las dependencias del proyecto de manera rápida y confiable.
        # mas rapido que npm install, ya que no verifica la version de las dependencias, solo instala lo que esta en el package-lock.json
        run: npm ci # Instala las dependencias de manera limpia, eliminando la carpeta node_modules y el package-lock.json (clean install) pero teniendo en cuenta la cache

      - name: Run linting # El key name es solo descriptivo, no afecta el funcionamiento
        # Recuerda que si el comando npm run lint no existe, el job fallara
        run: npm run lint # Ejecuta el linter para verificar el estilo de codificacion y errores en el codigo

      - name: Run tests # El key name es solo descriptivo, no afecta el funcionamiento
        run: npm run test # Ejecuta los tests del proyecto, si alguno falla, el job fallara

  build:
    runs-on: ubuntu-latest
    needs: test # Este job depende del job test, si el job test falla, este job no se ejecutara, si no se usa este key, el job se ejecutara sin importar si el job test falla o no

    steps:
      - uses: actions/checkout@v4 # Descarga el repositorio en la version del commit que se esta ejecutando

      - name: Setup Node.js # Este solo es un campo descriptivo, no afecta el funcionamiento
        uses: actions/setup-node@v4 # Configura el entorno de Node.js en la maquina virtual
        with: # Con este key se pueden agregar opciones al action
          node-version: '20' # Version de Node.js a utilizar
          cache: 'npm' # Cachea las dependencias de npm para acelerar el proceso, esto lo hace en el package-lock.json

      - name: Install dependencies # Instala las dependencias del proyecto, el name es solo descriptivo
        run: npm ci # Instala las dependencias de manera limpia, eliminando la carpeta node_modules y el package-lock.json (clean install) pero teniendo en cuenta la cache

      - name: Build # El key name es solo descriptivo, no afecta el funcionamiento
        run: npm run build # Ejecuta el build del proyecto, si alguno falla, el job fallara

      - name: Upload artifact # El key name es solo descriptivo, no afecta el funcionamiento
        uses: actions/upload-artifact@v4 # Este action sube un artefacto al job
        with:
          name: build # Nombre del artefacto, se puede cambiar por cualquier nombre
          